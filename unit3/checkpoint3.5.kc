//Each function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file
#pragma link("mega65hyper.ld")

//Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

//Some text to display
char[] MESSAGE = "Lin0385 operating system starting...";
char[] MESSAGE2 = "testing hardware";
char[] MESSAGE3 = "memory found at $";
char[] MESSAGE4 = " - $";
char[] MESSAGE5 = "finished testing hardware";
char[] MESSAGE99 = "memory error at";

// checkpoint3.5
struct device_memory_allocation{
	unsigned short first_address;
	unsigned short last_address;
	char* device_name;
};

struct device_memory_allocation[16] device_memory_allocations;
unsigned char device_allocation_count=0; 

void memory_allocation(unsigned short* add, char* device_name){

	if (device_name=="vic-ii"){
		device_memory_allocations[device_allocation_count].first_address=add;
		device_memory_allocations[device_allocation_count].last_address=add+$7F;
		device_memory_allocations[device_allocation_count].device_name=*device_name;
		device_allocation_count++;
		device_memory_allocations[device_allocation_count].first_address=add+$100;
		device_memory_allocations[device_allocation_count].last_address=add+$3FF;
		device_memory_allocations[device_allocation_count].device_name=*device_name;
		device_allocation_count++;
		device_memory_allocations[device_allocation_count].first_address=add+$800;
		device_memory_allocations[device_allocation_count].last_address=add+$BFF;
		device_memory_allocations[device_allocation_count].device_name=*device_name;
		device_allocation_count++;
	}else if (device_name=="mos6526"){
		device_memory_allocations[device_allocation_count].first_address=add;
		device_memory_allocations[device_allocation_count].last_address=add+$FF;
		device_memory_allocations[device_allocation_count].device_name=*device_name;
		device_allocation_count++;
	}
}





//SYSCALL handlers
void syscall1(){exit_hypervisor();}
void syscall2(){exit_hypervisor();}
void syscall3(){exit_hypervisor();}
void syscall4(){exit_hypervisor();}
void syscall5(){exit_hypervisor();}
void syscall6(){exit_hypervisor();}
void syscall7(){exit_hypervisor();}
void syscall8(){exit_hypervisor();}
void syscall9(){exit_hypervisor();}
void syscall10(){exit_hypervisor();}
void securentr(){exit_hypervisor();}
void securexit(){exit_hypervisor();}
void syscall13(){exit_hypervisor();}
void syscall14(){exit_hypervisor();}
void syscall15(){exit_hypervisor();}
void syscall16(){exit_hypervisor();}
void syscall17(){exit_hypervisor();}
void syscall18(){exit_hypervisor();}
void syscall19(){exit_hypervisor();}
void syscall20(){exit_hypervisor();}
void syscall21(){exit_hypervisor();}
void syscall22(){exit_hypervisor();}
void syscall23(){exit_hypervisor();}
void syscall24(){exit_hypervisor();}
void syscall25(){exit_hypervisor();}
void syscall26(){exit_hypervisor();}
void syscall27(){exit_hypervisor();}
void syscall28(){exit_hypervisor();}
void syscall29(){exit_hypervisor();}
void syscall30(){exit_hypervisor();}
void syscall31(){exit_hypervisor();}
void syscall32(){exit_hypervisor();}
void syscall33(){exit_hypervisor();}
void syscall34(){exit_hypervisor();}
void syscall35(){exit_hypervisor();}
void syscall36(){exit_hypervisor();}
void syscall37(){exit_hypervisor();}
void syscall38(){exit_hypervisor();}
void syscall39(){exit_hypervisor();}
void syscall40(){exit_hypervisor();}
void syscall41(){exit_hypervisor();}
void syscall42(){exit_hypervisor();}
void syscall43(){exit_hypervisor();}
void syscall44(){exit_hypervisor();}
void syscall45(){exit_hypervisor();}
void syscall46(){exit_hypervisor();}
void syscall47(){exit_hypervisor();}
void syscall48(){exit_hypervisor();}
void syscall49(){exit_hypervisor();}
void syscall50(){exit_hypervisor();}
void syscall51(){exit_hypervisor();}
void syscall52(){exit_hypervisor();}
void syscall53(){exit_hypervisor();}
void syscall54(){exit_hypervisor();}
void syscall55(){exit_hypervisor();}
void syscall56(){exit_hypervisor();}
void syscall57(){exit_hypervisor();}
void syscall58(){exit_hypervisor();}
void syscall59(){exit_hypervisor();}
void syscall60(){exit_hypervisor();}
void syscall61(){exit_hypervisor();}
void syscall62(){exit_hypervisor();}
void syscall63(){exit_hypervisor();}
void syscall64(){exit_hypervisor();}
void reset(){

  *VIC_MEMORY = 0x14;
  memset(SCREEN, ' ', 40*25);
  memset(COLS, WHITE, 40*25);
  
  // checkpoint3.2 &checkpoint3.3
  print_to_screen(MESSAGE);
  print_newline();
  print_to_screen(MESSAGE2);
  print_newline();
  
  
  // checkpoint3.3
  detect_devices();
	

  exit_hypervisor();
}

void pagfault(){exit_hypervisor();}
void restorkey(){exit_hypervisor();}
void alttabkey(){exit_hypervisor();}
void vf011rd(){exit_hypervisor();}
void vf011wr(){exit_hypervisor();}
void reserved(){undefined_trap;}
void cpukil(){exit_hypervisor();}

void exit_hypervisor(){

*(unsigned char*)$D67F = $01;

}

//function for checkpoint3.2
void test_memory(){

  // definitions for checkpoint 3.2
  unsigned short mem_start = $0800;
  unsigned short mem_end = $0800;
  volatile unsigned char *p;
  byte flag = 0;
  
  for (p=$0800;p<$8000;p++){
    for (byte i=0;i<255;i++){
         *p = i;

         if (*p!=i){
            flag =1;
            print_to_screen(MESSAGE99);
            print_hex((unsigned short)p);
            print_newline();
            break;
         }  
         
     }
     if (flag==1) break;
     mem_end = (unsigned short)p;
  }
  
  print_to_screen(MESSAGE3);
  print_hex((unsigned short)mem_start);
  print_to_screen(MESSAGE4);
  print_hex((unsigned short)mem_end);
  print_newline();
  print_to_screen(MESSAGE5);

}

//function for checkpoint3.3 


void detect_devices(){
  volatile unsigned short *add;
  volatile unsigned short *end;
  
  for (add=$D000;add<=$DFF0;add+=$10){

     // detecting VIC-II
     if (detect_vicii(add)==$7F){
        //print_to_screen("vic-ii detected at $");
        //print_hex((unsigned short)add);
        //print_to_screen(" -- $");
        print_to_screen("found vic-ii");
        print_newline();
        // checkpoint3.4
        add = (unsigned short)add + $7F;
        print_hex((unsigned short) add);
        print_newline();
        add = (unsigned short)add + $1;  
     }
     // detecting MOS 6526 Complex Interface Adapter
     // checkpoint3.4
     if (detect_mos6526(add)==$FF){
        //print_to_screen("mos6526 detected at $");
        //print_hex((unsigned short)add);
        //print_to_screen(" -- $");
        //add = (unsigned short)add + $FF;
        //print_hex((unsigned short) add);
        //print_newline();
        //add = (unsigned short)add + $1;
        print_to_screen("found mos6526");
        print_newline();
     }
  }
  print_to_screen("finished probing for devices");
  for (int i=0;i<=device_allocation_count;i++){
  	print_to_screen(device_memory_allocations[i].device_name);
  	print_to_screen(" at ");
  	print_to_screen(device_memory_allocations[i].first_address);
  	print_to_screen(" to ");
  	print_to_screen(device_memory_allocations[i].last_address);
  	print_newline();
  }
}

// function for checkpoint3.3
unsigned short detect_vicii(unsigned short* address){

  volatile unsigned char* p2 = (unsigned char*)address;
  unsigned char v1,v2;
  unsigned short i;
  unsigned short result;
  char[] name_vicii = "vic-ii";
  
  v1= p2[$12]; //Read start address +$12
  for (i=1;i<1000;i++) continue;
  v2= p2[$12]; //Read again
  
  if (v2>v1){
     result = $7F;
     memory_allocation(p2,name_vicii);
      
  }
  if (v2<v1){
     result = 0;   
  }
  return result;
}

//function for checkpoint3.4 
unsigned short detect_mos6526(unsigned short* address){

  volatile unsigned char* p2 = (unsigned char*)address;
  unsigned char v1,v2,v3,v4;
  unsigned long i;
  unsigned short result=$FF;
  char[] name_mos6526 = "mos6526";
  
  v1= p2[$19]; //Read start address +$9 for the second field
  v3 = p2[$1B]; // Read start address +$B for the hour field
  if (v3>$0 && v3<$150){ 
  	for (i=1;i<2000001;i++) continue; // after one second
  	v4= p2[$19]; //Read the second field again
  	if (v4>v1){
     	return result; 
     	memory_allocation(p2,name_mos6526);
  	}  	
  }
  return 0;
}


//function showing hexadecimal numbers for checkpoint3.2
void print_hex(unsigned short value){

   char[5] hex;
   unsigned char i;
   for(i=0;i<4;i++){
       if (value<0xa000) 
           hex[i]='0'+(char)(value>>12);
       else 
           hex[i] = (char)(value>>12)-9;
           value<<=4;
   }
   hex[4]=0;
   print_to_screen(hex);
}



//Definition for checkpoint3.1
unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;


// Print message for checkpoint3.1
void print_to_screen(char *message){
  
  char *msg = message;

  while(*msg){
    *(current_screen_line + current_screen_x) = *msg++; 
    current_screen_x++;
  }
}
// Go to nextline for checkpoint3.1
void print_newline(){
   current_screen_line = current_screen_line + 40;
   current_screen_x = 0;
   
} 

void main(){}

//We select the SYSCALL segment to hold the SYSCALL/trap entry point table
#pragma data_seg(Syscall) 

//THe structure of each entry point is JMP(handler address) + NOP
//We have a char(xjmp) to hold the opcode for the JMP instruction
//and then put the address of the SYSCALL/trap handler in the next two points as a pointer
//and end with the NOP indstruction opcode.

struct SysCall{
  char xjmp;        //Holds $4C, the JMP $nnnn opcode
  void()* syscall;  //Holds handler address, will be the target of the JMP
  char xnop;        //Holds $EA, the NOP opcode
};   

//To save writing 0x4c and 0xEA all the time, we define them as constants
const char JMP = 0x4c;
const char NOP = 0xea;

//A table of up to 64 SYSCALL handlers expressed in a fairly readable and easy format
//Each line is an instance of the struct SysCall from above, with the JMP opcode value
//the address of the handler routine and the NOP opcode value

export struct SysCall[] SYSCALLS = {
   {JMP, &syscall1, NOP},
   {JMP, &syscall2, NOP},
   {JMP, &syscall3, NOP},
   {JMP, &syscall4, NOP},
   {JMP, &syscall5, NOP},
   {JMP, &syscall6, NOP},
   {JMP, &syscall7, NOP},
   {JMP, &syscall8, NOP},
   {JMP, &syscall9, NOP},
   {JMP, &syscall10, NOP},
   {JMP, &securentr, NOP},
   {JMP, &securexit, NOP}, 
   {JMP, &syscall13, NOP},
   {JMP, &syscall14, NOP},
   {JMP, &syscall15, NOP},
   {JMP, &syscall16, NOP},
   {JMP, &syscall17, NOP},
   {JMP, &syscall18, NOP},
   {JMP, &syscall19, NOP},
   {JMP, &syscall20, NOP},
   {JMP, &syscall21, NOP},
   {JMP, &syscall22, NOP},
   {JMP, &syscall23, NOP},
   {JMP, &syscall24, NOP},
   {JMP, &syscall25, NOP},
   {JMP, &syscall26, NOP},
   {JMP, &syscall27, NOP},
   {JMP, &syscall28, NOP},
   {JMP, &syscall29, NOP},
   {JMP, &syscall30, NOP},
   {JMP, &syscall31, NOP},
   {JMP, &syscall32, NOP},
   {JMP, &syscall33, NOP},
   {JMP, &syscall34, NOP},
   {JMP, &syscall35, NOP},
   {JMP, &syscall36, NOP},
   {JMP, &syscall37, NOP},
   {JMP, &syscall38, NOP},
   {JMP, &syscall39, NOP},
   {JMP, &syscall40, NOP},
   {JMP, &syscall41, NOP},
   {JMP, &syscall42, NOP},
   {JMP, &syscall43, NOP},
   {JMP, &syscall44, NOP},
   {JMP, &syscall45, NOP},
   {JMP, &syscall46, NOP},
   {JMP, &syscall47, NOP},
   {JMP, &syscall48, NOP},
   {JMP, &syscall49, NOP},
   {JMP, &syscall50, NOP},
   {JMP, &syscall51, NOP},
   {JMP, &syscall52, NOP},
   {JMP, &syscall53, NOP},
   {JMP, &syscall54, NOP},
   {JMP, &syscall55, NOP},
   {JMP, &syscall56, NOP},
   {JMP, &syscall57, NOP},
   {JMP, &syscall58, NOP},
   {JMP, &syscall59, NOP},
   {JMP, &syscall60, NOP},
   {JMP, &syscall61, NOP},
   {JMP, &syscall62, NOP},
   {JMP, &syscall63, NOP},
   {JMP, &syscall64, NOP}
};

//We can just ask KickC to make the TRAP table begin at the next multiple of $100, i.e., at $8100
   
export align(0x100) struct SysCall[] TRAPS = {
   {JMP, &reset, NOP},
   {JMP, &pagfault, NOP},
   {JMP, &restorkey, NOP},
   {JMP, &alttabkey, NOP},
   {JMP, &vf011rd, NOP},
   {JMP, &vf011wr, NOP},
   {JMP, &reserved, NOP},
   {JMP, &cpukil, NOP}
   
};
