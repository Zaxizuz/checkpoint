import "string"

#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

char[] MESSAGE = "checkpoint2.2 by lin0385";

void main(){

  *VIC_MEMORY = 0x14;
  memset(SCREEN, ' ', 40*25);
  memset(COLS, WHITE, 40*25);
  
  char* sc = SCREEN+40;
  char* msg = MESSAGE;

  while(*msg){
    *sc++ = *msg++;
  }

  while(true){
    if(*RASTER==52||*RASTER==66){
      *BGCOL=WHITE;
    }else{
      *BGCOL=BLACK;
    }
  }
}

void syscall1(){
  *(SCREEN+79) = '>';
}

void syscall2(){
  *(SCREEN+78) = '<';
}

void syscall0(){}
void syscall3(){}
void syscall4(){}
void syscall5(){}
void syscall6(){}
void syscall7(){}
void syscall8(){}
void syscall9(){}
void syscallA(){}
void syscallB(){}
void syscallC(){}
void syscallD(){}
void syscallE(){}
void syscallF(){}
void syscall10(){}
void syscall13(){}
void syscall14(){}
void syscall15(){}
void syscall16(){}
void syscall17(){}
void syscall18(){}
void syscall19(){}
void syscall1A(){}
void syscall1B(){}
void syscall1C(){}
void syscall1D(){}
void syscall1E(){}
void syscall1F(){}
void syscall20(){}
void syscall21(){}
void syscall22(){}
void syscall23(){}
void syscall24(){}
void syscall25(){}
void syscall26(){}
void syscall27(){}
void syscall28(){}
void syscall29(){}
void syscall2A(){}
void syscall2B(){}
void syscall2C(){}
void syscall2D(){}
void syscall2F(){}
void syscall30(){}
void syscall31(){}
void syscall32(){}
void syscall33(){}
void syscall34(){}
void syscall35(){}
void syscall36(){}
void syscall37(){}
void syscall38(){}
void syscall39(){}
void syscall3A(){}
void syscall3B(){}
void syscall3C(){}
void syscall3D(){}
void syscall3F(){}
void reset(){}
void pagfault(){}
void restorkey(){}
void alttabkey(){}
void vf011rd(){}
void vf011wr(){}
void reserved(){}
void cpukil(){}

#pragma data_seg(Syscall) 

struct SysCall{
  char xjmp;
  void()* syscall;
  char xnop;
};   

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
   {JMP, &syscall1, NOP},
   {JMP, &syscall2, NOP}
   };
   
export align(0x100) struct SysCall[] SYSCALL_RESET = {
   {JMP, &main, NOP}
};